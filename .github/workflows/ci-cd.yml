name: CI/CD Pipeline
on:
  push:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ivan11sa/proyecto-php-nginx
  K8S_NS: webapp                    

jobs:
  # ────────────────────────────────────────────────────────────────────────────────
  build:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build & push image
      run: |
        TAG=${GITHUB_SHA::7}
        docker build -t $REGISTRY/$IMAGE_NAME:$TAG .
        docker push $REGISTRY/$IMAGE_NAME:$TAG
        echo "$TAG" > image_tag.txt

    - name: Upload image tag
      uses: actions/upload-artifact@v4
      with:
        name: image_tag
        path: image_tag.txt

  # ────────────────────────────────────────────────────────────────────────────────
  deploy:
    runs-on: self-hosted
    needs: build

    steps:
    - name: Download image tag
      uses: actions/download-artifact@v4
      with:
        name: image_tag
        path: .

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.K8S_CONFIG }}" | base64 -d > $HOME/.kube/config

    - name: Renderizar manifiestos k8s con tag de imagen
      run: |
        # Lee el tag generado
        IMAGE_TAG=$(cat image_tag.txt)
        export IMAGE_TAG

        # Crea carpeta para los YAML renderizados
        mkdir -p rendered

        # Ajusta rutas a tus archivos reales
        envsubst < nginx-balancer-deployment.yaml > rendered/nginx-balancer-deployment.yaml
        envsubst < php-deployment.yaml       > rendered/php-deployment.yaml

    - name: Aplicar despliegue en Kubernetes
      run: |
        kubectl apply -n "$K8S_NS" -f rendered/nginx-balancer-deployment.yaml
        kubectl apply -n "$K8S_NS" -f rendered/php-deployment.yaml

        # Espera a que arranquen los Deployments correctos
        kubectl -n "$K8S_NS" rollout status deployment/nginx-balancer --timeout=5m
        kubectl -n "$K8S_NS" rollout status deployment/php-deployment  --timeout=5m

    - name: Rollback if rollout fails
      if: failure()
      run: |
        echo "❌ Rollout failed. Reverting..."
        kubectl -n "$K8S_NS" rollout undo deployment/nginx-balancer
        kubectl -n "$K8S_NS" rollout undo deployment/php-deployment
