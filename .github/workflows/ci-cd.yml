name: CI/CD Pipeline
on:
  push:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ivan11sa/proyecto-php-nginx
  K8S_NS: webapp                    

jobs:
  build:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Image
        run: |
          # Genera un tag único por commit
          TAG=${GITHUB_SHA::7}

          # Construye usando el Dockerfile en la raíz
          docker build -t $REGISTRY/$IMAGE_NAME:$TAG .

          # Sube la imagen
          docker push $REGISTRY/$IMAGE_NAME:$TAG

          # Guarda el tag para el siguiente job
          echo "IMAGE_TAG=$TAG" > image_tag.env

      - name: Upload image tag
        uses: actions/upload-artifact@v4
        with:
          name: image_tag
          path: image_tag.env

  deploy:
    runs-on: self-hosted
    needs: build

    steps:
      - name: Download image tag
        uses: actions/download-artifact@v4
        with:
          name: image_tag
          path: .

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.K8S_CONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Load tag into env
        run: |
          source image_tag.env
          echo "Deploying image tag: $IMAGE_TAG"

      - name: Rolling update on Kubernetes
        run: |
          # Actualiza PHP-FPM
          kubectl -n $K8S_NS set image deployment/php-deployment \
            php-fpm=$REGISTRY/$IMAGE_NAME:$IMAGE_TAG --record

          # Actualiza Nginx (supervisor + PHP-FPM)
          kubectl -n $K8S_NS set image deployment/nginx-balancer \
            nginx=$REGISTRY/$IMAGE_NAME:$IMAGE_TAG --record

          # Espera a que terminen los rolling updates
          kubectl -n $K8S_NS rollout status deployment/php-deployment --timeout=3m
          kubectl -n $K8S_NS rollout status deployment/nginx-balancer --timeout=3m

      - name: Rollback if rollout fails
        if: failure()
        run: |
          echo "❌ Rollout failed. Undoing..."
          kubectl -n $K8S_NS rollout undo deployment/php-deployment
          kubectl -n $K8S_NS rollout undo deployment/nginx-balancer
